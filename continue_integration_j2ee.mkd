持续集成在J2EE项目中的实践与应用
===========================

#导论

#持续集成的理论基础

持续集成的术语，源自XP（极限编程）的一个实践，然而Martin Fowler认为，在这个术语被提出之前，这个实践本身就已经存在了。换言之，持续集成是随着软件工程的发展自然形成的一套方法论，并被广泛应用与于各种软件开发过程之中。实践证明，软件项目的很多潜在问题，都是在集成过程中被发现的。因此持续集成，就是基于这样一种思想，软件应该尽可能频繁的进行集成，从而在小幅增量式的构建当中尽早的发现问题，这样一来，问题就更加容易定位和解决。

事实上，持续集成与团队开发往往是结伴而生的。没错，对于过去那种“孤单英雄”式的开发，持续集成的意义不大，这是因为对于单个开发者而言，沟通成本几乎没有，他并不需要跟其他人进行集成与协调，他只需要对着自己的机器即可。然而这种开发模式，早已一去不复返。软件开发团队的规模一直在普遍的增长，即使是一个小团队，也至少包含四五个开发者。对于企业应用的开发，这种倾向就更加明显，小则二三十人，大则几百人的团队随处可见。而随着去全球化经济的进程，分布式开发团队也越来越多，在很多项目中，其项目组成员分布在全球各地。在这样的团队当中，沟通成本是相当之高，以至于想要开一个全员参加的电话会议都十分困难。想象如果一名开发人员修改了某个接口，他将如何将这个接口的改变通知给众多的使用者呢？如果某些使用者未能及时了解该接口的变更而继续使用旧的接口进行开发，毫无疑问这将引入问题并造成成本的浪费，在此基础上产生的负面影响取决于接口使用者在错误的到路上会前进多远。持续集成在这种场景下将带来很大的益处，持续集成服务器会使用代码库中最新的代码进行构建，而因为新的接口将会导致其依然使用旧接口的代码构建失败，从而强制性的通知到所有的接口使用者去使用新的接口，并修改代码与之匹配。并且这种自动构建行为是十分频繁的，现代的持续集成服务器甚至可以对源码库进行监视，一旦有新的代码进入就会触发一次构建，从而保证反馈的及时性。

开发团队在应用持续集成的过程中，往往也会经历几个阶段，逐步从基本的构建，即保证源码编译通过，到添加更多的单元测试以保障接口实现的正确性，再到增加功能性测试以保障程序运行时的行为正确性，再到加入静态代码分析以避免潜在问题，加入编码风格检查以提高代码的可维护性等等，最终实现持续交付的能力。

可以说在现代软件开发团队中，无论是采取什么样的开发模式，持续集成都已经成为软件开发本身的不可缺少的一环。本文将针对基于JavaEE的企业应用开发，论述如何建立高效的持续集成系统。

## 软件项目团队开发中的常见问题

现代软件开发的一个特点是团队化，这是由于软件的复杂性越来越高，客户的要求越来越挑剔，软件工程的分工越来越细致，全球化冲击带来的分布式开发模式等造成的。这意味着“孤单英雄”式的开发模式将不复存在。一个典型的开发团队，至少需要由业务开发人员，UI开发人员，需求分析人员，测试人员，项目经理等角色组成。其中，每个角色都可能由N人担任，这取决与项目的规模。

##持续集成与敏捷开发的理论

##持续集成系统的组成及相关技术

###源码控制

1. CVS

    CVS可以称得上是古老的版本控制系统了，它始于80年代，曾经被广泛的应用与商业软件和开源项目当中。CVS使用GNU授权，RCS文件系统，CVS提供了基本的版本控制功能。现在CVS也支持项目分支。作为最初的版本控制系统，CVS曾经起到了很多的作用，然而毫无疑问的是，对于现今而言，它已经落伍。这主要体现在以下方面：
    
    * 不支持原子提交。这算得上是CVS的严重缺陷之一。在CVS中，如果一次提交多个文件，而其中一个文件提交失败，其余的文件会成功进入到代码库。在这种情形下，将可能导致代码库处于一个”不完整“状态。也就说，有可能一个某个功能所需的文件，只有一部分包含在其中，而另一部分未能包含。若在此时检出代码，将会得到不可运行甚至不可编译的代码。
    * 版本号是基于文件而非整个代码库的。 CVS的版本号，是基于每个文件的自增序号。这意味着只能通过版本号得到某个文件的历史信息，而不能得到在某个时间点上整个代码库的信息。
    * CVS没有任何针对文件目录的信息。对于CVS而言，将一个目录从A处移动到B处（在Java源码中对包名进行重构会直接导致这个动作,而这是经常发生的)，只是某些文件在A目录下删除，然后在B目录下又出现了一些新的文件。这两个动作是毫无关联的两件事，所以此时移动后的文件的历史版本信息将不复存在。
    * 对二进制文件的支持很差。由于历史原因，CVS最初是只针对程序员而设计的，而最初的源程序中往往只包含文本文件。CVS能够对文本文件进行差异化存储，版本比较，以及文件合并。但对于二进制文件则无法做到。对二进制文件，CVS只能使用冗余的多个文件来记录其版本信息。假设代码库中包含一个5M的图片文件，这个文件经常被修改，那么修改10次之后，就会在代码仓库中留下10个完整的文件，占掉50M的空间。并且每次客户端请求更新文件时，都将产生10M的网络传输。显然，当我们希望将一些项目文档，设计图，用户手册等文件也加入到版本控制系统中时，CVS将会力不从心。
    
2. Apache Subversion

    Apache Subversion（简称SVN)是由Apache软件基金会提供的一个开放源代码的版本控制系统。想对于RCS和CVS，采用了分支管理系统。SVN几乎提供了CVS的所有功能，并在设计和实现上都有大幅度的改进。许多项目都在从CVS系统迁移至SVN。相比CVS，SVN主要有以下方面的提升：

    * 统一的版本号。svn的版本号是基于整个代码库的。所以在SVN中，每次提交都会使得所有文件的版本号增加。这也就是说，我们可以通过一个版本号来确定整个代码库的状态。
    * 原子提交。在SVN中，一次提交无论包含一个还是多个文件，都是作为一个整体提交的。整个原子要么全部提交成功，要么全部失败。这种类似关系数据库中的“事务”的概念，保障了代码库的一致性，不会引起代码哭的不完整和数据破坏。另外，原子提交使得每次提交可以对应到一个具体的任务当中。比如某开发人员为了修复一个bug而修改了若干文件，那么当他提交这些文件时，可以在版本变更的记录中指明此次提交是修复哪个问题。这样开发人员就可以明确的通知测试人员，该bug在哪个版本之后得到修复。这对于bug的管理是十分有益处的。
    * 目录也有版本历史，整个目录树可以被移动或复制，并且能够保留全部的版本记录。
    * 因为SVN的文件差异存储本来就是基于二进制的，因此对于二进制文件，也可以保存其增量修改，从而节省空间和网络传输。
    * 支持元数据(Metadata）管理。每个目录或文件都可以有一些自定义属性，并且这些属性也在版本控制范围之内，这提供了一定的扩展性。
    * 开创分支的开销非常小。
    * 能够提供和Apache Web Server的集成，同时支持svn,http,https等多种文件传输协议。这使得在持续集成服务器上通过配置源码查看插件来直接查看源码，比较版本信息成为可能。
    
    与CVS相同的是，SVN也基于Client-Server结构，或称之为CVCS，中央版本控制系统。由一个，且只能有一个，中央仓库来维护所有的版本信息。客户端和服务器端形成星形的拓扑结构。这种结构的优点是相对简单，只需在服务器端保留一份代码库即可。其缺点也是明显的

    * 某些操作无法在离线状态下进行，例如回滚文件到某个特定版本，或者查看文件的历史信息，开创临时分支等等。
    * 由于只有一个中央服务器，对于全球化的团队写作而言，必将受限于网络环境，带宽等因素，降低开发效率。
    * 一旦服务器出现故障，所有开发人员将无法提交代码。如果不幸是存储磁盘出现故障，甚至很难恢复代码库的版本信息。当然通过定时备份等机制，可以做到在一定程度上避免这种损失。
    
    
    除此之外，SVN权限的授予是基于目录而非基于文件的，所以无法做到更细粒度的访问权限控制。
    
    
    
3. 分布式版本控制系统的崛起 Git/Mercurial
    
    上面谈到了一些Subversion的缺陷，其中多数是由于其服务器-客户端的设计架构所决定的，很难得到改进。在此背景下，与之相对应的另一族版本控制工具，DVCS（分布式版本控制管控制系统）得到了越来越多的应用。这个领域比较成熟的产品有Git,Mercurial和Bzr。下面以Mercurial为例来说明分布式版本控制系统与中央版本控制系统的区别。
    
    分布式版本控制系统的特点是，在概念上并不存在一个唯一的仓库，当然，在工程实践当中我们还是会指定一个服务器来担任此角色。然而需要注意的是，本质上这个“中央仓库”和”工作目录“（即开发人员本地的代码仓库）并没有区别，因为它们都包含有代码库的全部元数据信息。开发过程中所有的修改，首先都是提交到本地的工作目录之中，工作目录和中央仓库之间，再通过”同步“操作，将修改提交到服务器，并从服务器下发至其他工作目录（指其他开发人员的本地代码仓库）。

    
    ![img](file:///home/alex/Documents/paper/mercurial_01.png)
    
    在此种模式下，提交，更新，回滚，查看历史信息等操作都无需与中央仓库进行通信，一方面大大减少了中央仓库的压力，另一方面也提高了开发人员的体验，所有的操作都会快速很多。除了本地提交带来的快速之外，在一下几个场景中，Mercurial都有更出色的表现
    
    - 应对服务器宕机
    
    由于本质上中央仓库和工作目录所包含的信息并没有不同，所以一旦中央仓库出现故障，可以制定任意一个工作目录作为临时的中央仓库，让其他的工作目录都指向它，并继续工作。同时对中央仓库进行维修，一旦维修结束，再将临时中央仓库与修复好的中央仓库进行同步，同步完成后，其他工作目录再重新指向中央仓库，一切又恢复到常态。整个过程中，几乎不会有任何的损失。
    
    ![img](file:///home/alex/Documents/paper/mercurial_02.png)    

    - 更加灵活的协同
    
    **场景一**
    开发人员A与B正在协同开发某个功能，他们各自对代码作出了一些修改之后，想要进行集成测试。在中央版本控制系统（如SVN）中，可能的做法是A提交，之后B更新代码，然后在B的本地开发环境中进行测试。这样的问题在于，由于A提交的代码在经过集成测试之前，并不能保证其正确性，然而这些代码却进入到了代码库当中，若是在此时有其他开发人员检出代码，就有可能得到“未经测试”的，甚至是“不完整”的代码，对于一个规模较大的团队而言，代码检出的频率是十分频繁的。在这个期间，就可能会给其他开发人员造成困扰，导致服务器上的代码处于无法工作的状态。 
    
    然而在Mercurial的版本控制系统中，可以这样做。开发人员A只需临时将提交指向B的代码库，然后提交代码后与B的工作目录进行同步，A所做的修改将会提交给B，B在得到修改之后在本地进行调试和集成测试，期间发现A的代码有问题，B与A进行沟通，要求A进行修改；A得知后，修改了代码，再次提交给B；B得到最新代码后再次进行集成和测试，本地测试通过之后，B将自己的修改连同A所做的修改一起提交到中央仓库，并通知A此任务以顺利完成，于是A将提交重新只想中央仓库，与之进行同步，然后得到最新的代码。整个过程中，中央代码仓库不会被污染。
    
    **场景二**
    开发人员A当前在Linux环境下工作，他完成了一些功能的修改并提交到了本地的工作目录。在与中央仓库进行提交之前，他需要先在Windows环境下进行测试。此时他可以找到一台Windows工作，将该工作站的工作目录指向Linux工作站，获取更新，之后在Windows平台验证功能，如果存在问题，可以直接在Windows平台下进行修复，之后提交并同步到Linux的工作目录，最后再回到Linux环境下，进行测试，最终将全部更新同步至中央仓库。
    
    **场景三**
    某大型开发团队分为几个组，该团队成员中既包括资深程序员也包括实习生，为了保证代码质量，每个组都由一位资深程序员作为代码审查者，负责审查实习生们的提交的代码是否有潜在问题。在SVN中，要做到这一点往往需要借助插件的支持(CodeCollabrator是代码审查的优秀工具)，而在Mercurial中则可以采取这样的策略，让实习生A将修改过的代码，提交给代码审查者B的工作目录，由B进行审查，如果有问题，则要求A作出修改并重新提交；如果没有问题，则由B代为向中央代码库进行提交，甚至还可以通过权限控制让实习生只能将代码提交给某位审查者。换言之，B在这个过程中，不只是一个开发者，还充当了“检察官”的角色，从而保证了代码的质量。这在培养新人或是团队扩张时期是十分有意义的。Linux的版本库控制目前就是采用了这种方式，全世界的贡献者将代码提交给Linux之父，由他进行甄别，哪些代码可以进入内核。
    

###自动构建系统

持续集成的一个重要思想是尽可能的将整个开发过程的各个环节自动化，这样就离不开构建工具的支持。自动化构建工具本身也是随着软件开发的发展而发展。所有的构建工具的核心，都是要解决一个依赖关系问题。也就是要能够对构建过程中的所有步骤间的依赖进行建模，并在执行过程中，以正确的顺序来执行一系列的任务。例如，想要运行一个测试，就需要编译自己的功能代码和测试代码，并设置测试数据，以及初始化一些环境相关的设置。（TODO-配图)


####构建工具的选择

1. Ant
    
    Ant是由Apache基金会开发并维护的一个任务导向的构建工具，它诞生于XML的应用火热的一段时期。XML由于其结构化的特点，和平台无关特性，理论上很适合于描述这些任务导向性的工具。Ant本身是用Java编写的，并包含了一些Java开发中的常用任务，比如编译和文件系统操作。Ant也可以使用Java来扩展一些新的任务，这些特性使得Ant在很短的时间内，成为了Java业内项目构建的事实标准，并且迅速得到了现代IDE的支持。
    
    Ant使用了XML作为它的外部DSL，再结合Java运行时环境的跨平台能力，这使得它十分强大而灵活，然而它也有一些缺点。
    
    1. 必须要用XML来写构建脚本，然而基于XML的脚本冗长，且难以阅读，这使得大型项目的Ant脚本的维护成为了噩梦。
    2. Ant脚本很难重用，尽管提供了import和macrode任务用于支持重用性，但事实上，对于新用户来说，这些特性十分难以理解。
    3. Ant任务本身无法回答类似“运行了多少个测试”，和“它们花了多少时间”这样的问题。要想得到这些信息，只有通过用户自己编写的Java扩展来做到。
    4. Ant对于依赖问题没有很好的解决方案，用户要自行安装各种第三方依赖的包，并在部署文件中指定它们的位置。
    5. Ant对与大型项目的模块化支持也不够好。

    正是由于Ant的这些缺陷，使得Java社区一直在不断地寻找替代Ant的解决方案，Maven就是其中的翘楚

2. Maven

    尽管也是基于XML的外部DSL进行项目构建描述，Maven与Ant在设计理念上却有很大的不同。Ant是面向任务的，对Ant而言，构建过程是一系列任务的有序集合，仅此而已。而Maven则囊括了更多。首先Maven对项目本身进行了建模，这个模型不仅包含了各种目录的位置，第三方依赖的引入机制，更重要的是包含了一个生命周期的概念。（TODO Maven生命周期图形）
    
    同时Maven推崇“约定优于配置”的理念，将一些Java业内多年来的积累的项目管理中的最佳实践引入进来，作为项目模型的默认值。这使得从头开始搭建一个项目变得十分容易。在Maven的帮助下，可以迅速的建立起一个项目骨架，并逐渐向其中添砖加瓦。从这个意义上将，Maven是开箱即用的。
    
3. Gradle

###测试系统

####测试框架的选择JUnit/TestNG

TestNG和JUnit是针对Java语言的两个比较常用的测试框架。JUnit出现的比较早，但是早期的JUnit3对测试代码有非常多的限制，使用起来很不方便，后来的JUnit4得到很大的改进。TestNG的出现介于JUnit3和JUnit4，但是TestNG在很多方面还要优于JUnit 4。下面从整体上对TestNG和JUnit 4进行比较全面的比较。

TestNG与JUnit的相同点：
       1. 使用annotation，且大部分annotation相同。
       2. 都可以进行单元测试（Unit test）。
       3. 都是针对Java测试的工具。

TestNG与JUnit的不同点：

1. JUnit只适合进行单元测试，对于功能测试，端到端测试等一个测试当中包含若干测试环节的场景支持很差，因为JUnit中一个测试类的若干测试方法是完全不相干的，JUnit甚至不保证其执行顺序。而TestNG可以进行单元测试，功能测试，端到端测试，集成测试等。
2. TestNG需要一个额外的xml配置文件，配置测试的class、method甚至package。
3. TestNG的annotation更加丰富，比如@ExpectedExceptions、@DataProvider等。
4. 测试套件运行失败，JUnit4会重新运行整个测试套件。TestNG运行失败时，会创建一个XML文件说明失败的测试，利用这个文件执行程序，就不会重复运行已经成功的测试。这个特性对于测试驱动开发以及频繁的持续集成策略有很大帮助，毕竟运行全部测试的时间成本是比较高的，只运行失败的测试就可以大幅度缩短两次集成之间的间隔。
5. TestNG支持并行的运行多个单元测试，这个特性可以充分利用多核的性能从而缩短测试时间。而JUnit不支持这样做。

TestNG在灵活性上也优于JUnit4：

1. JUnit 4中必须把@BeforeClass修饰的方法声明为public static，这就限制了该方法中使用的变量必须是static。而TestNG中@BeforeClass修饰的方法可以跟普通函数完全一样。

2. JUnit 4测试的依赖性非常强，测试用例间有严格的先后顺序。前一个测试不成功，后续所有的依赖测试都会失败。TestNG 利用@Test 的dependsOnMethods属性来应对测试依赖性问题。某方法依赖的方法失败，它将被跳过，而不是标记为失败。

3. 对于n个不同参数组合的测试，JUnit 4要写n个测试用例。每个测试用例完成的任务基本是相同的，只是受测方法的参数有所改变。TestNG的参数化测试只需要一个测试用例，然后把所需要的参数加到TestNG的xml配置文件中。这样的好处是参数与测试代码分离，非程序员也可以修改参数，同时修改无需重新编译测试代码。

4. 为了测试无法用String或原语值表示的复杂参数化类型，TestNG提供的@DataProvider使它们映射到某个测试方法。

下面就上面提到的几个方面展示一些代码示例：

####示例一：简单的单元测试


<center><small>JUnit4的单元测试</small></center>

---
~~~
package test.com.acme.dona.dep;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import org.junit.BeforeClass;TesgNG的单元测试代码
import org.junit.Test;

public class DependencyFinderTest {
 private static DependencyFinder finder;

 @BeforeClass
 public static void init() throws Exception {
  finder = new DependencyFinder();
 }

 @Test
 public void verifyDependencies() 
  throws Exception {
   String targetClss = 
     "test.com.acme.dona.dep.DependencyFind";

   Filter[] filtr = new Filter[] { 
      new RegexPackageFilter("java|junit|org")};

   Dependency[] deps = 
      finder.findDependencies(targetClss, filtr);

   assertNotNull("deps was null", deps);
   assertEquals("should be 5 large", 5, deps.length);	
 }
}
~~~


<center><small>TestNG的单元测试</small></center>

---
~~~
package test.com.acme.dona.dep;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Configuration;
import org.testng.annotations.Test;

public class DependencyFinderTest {
 private DependencyFinder finder;

 @BeforeClass
 private void init(){
  this.finder = new DependencyFinder();
 }

 @Test
 public void verifyDependencies() 
  throws Exception {
   String targetClss = 
     "test.com.acme.dona.dep.DependencyFind";

   Filter[] filtr = new Filter[] { 
      new RegexPackageFilter("java|junit|org")};

   Dependency[] deps = 
      finder.findDependencies(targetClss, filtr);
   
   assertNotNull(deps, "deps was null" );
   assertEquals(5, deps.length, "should be 5 large");		
 }
}
~~~

上面两个测试用例的写法上看起来十分相近，但是有一个细微的差别，就是TestNG的用例中@BeforeClass修饰的方法无需是public static的，而JUnit则强制要求是public static的。这一点上TestNG提供了更多的灵活性，因为实际的测试代码中很可能出现继承关系，此时JUnit的强制要求就回带来很多不便了。

####示例二：依赖性测试

JUnit在设计之初就是针对单元测试的，因此也秉承了“单元测试之间应该互相隔离“的设计准则。因此JUnit中理论上是无法指定测试的执行顺序的，而对于功能性测试而言，一个用例中包含若干步骤，这时TestNG的对依赖性测试的支持就体现出巨大的优势了。

比如这样一个场景：

<center><small>TestNG的依赖性测试</small></center>

---
~~~

import net.sourceforge.jwebunit.WebTester;

public class AccountHistoryTest  {
 private WebTester tester;

 @BeforeClass
 protected void init() throws Exception {
  this.tester = new WebTester();
  this.tester.getTestContext().
   setBaseUrl("http://div.acme.com:8185/ceg/");
 }

 @Test
 public void verifyLogIn() {
  this.tester.beginAt("/");		
  this.tester.setFormElement("username", "admin");
  this.tester.setFormElement("password", "admin");
  this.tester.submit();		
  this.tester.assertTextPresent("Logged in as admin");
 }

 @Test (dependsOnMethods = {"verifyLogIn"})
 public void verifyAccountInfo() {
  this.tester.clickLinkWithText("History", 0);		
  this.tester.assertTextPresent("GTG Data Feed");
 }
}

~~~

这是一段功能性测试代码，其中包含了两个测试用例，第一步是进入登录表单，输入用户名，密码，然后提交表单，验证登录成功;第二步是点击History链接，验证跳转后的页面中应该显示文本"GTG Data Feed"。
在第二个测试用例中，使用`dependsOnMethods = {"verifyLogIn"}`确保了用例的执行顺序。一旦依赖的用例失败的话，后续的测试用例将直接跳过，而不是尝试执行并失败，这既节省了执行时间，也方便了开发人员查找错误点。

此外TestNG还提供了”重新运行上次失败的测试“功能，如果一次运行多个测试套件，而其中几个失败,TestNG将自动生成一个XML配置文件，开发人员在尝试修复测试之后，只需指定这个配置文件来重新运行测试，就会跳过上一次已经成功的测试，而只运行失败的几个。对于大型项目中测试套件较多的情形，这能够大幅度节约开发和测试的时间成本。

<center><small>测试失败后生成的XML配置文件</small></center>

---
```
 <!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
 <suite thread-count="5" verbose="1" name="Failed suite [HistoryTesting]" 
       parallel="false" annotations="JDK5">
 <test name="test.com.acme.ceg.AccountHistoryTest(failed)" junit="false">
  <classes>
   <class name="test.com.acme.ceg.AccountHistoryTest">
    <methods>
     <include name="verifyLogIn"/>
    </methods>
   </class>
  </classes>
 </test>
</suite>

```

####示例三：参数化测试

此外TestNG还提供了参数化测试的优秀特性，这对于测试用例逻辑相同，而只是使用不同的测试数据时十分有用，可以节省大量的代码，并简化了某些边界条件的测试。

<center><small>TestNG的参数化测试</small></center>

---
```
package test.com.acme.da;

import com.acme.da.hierarchy.Hierarchy;
import com.acme.da.hierarchy.HierarchyBuilder;

public class HierarchyTest {
 /**
  * @testng.test
  * @testng.parameters value="class_name, size"
  */
 public void assertValues(String classname, int size) throws Exception{
  Hierarchy hier = HierarchyBuilder.buildHierarchy(classname);
  assert hier.getHierarchyClassNames().length == size: "didn't equal!";
 }
}
```

<center><small>参数化测试的XML配置文件</small></center>

---
```
<!DOCTYPE suite SYSTEM "http://beust.com/testng/testng-1.0.dtd">
<suite name="Deckt-10">
 <test name="Deckt-10-test">

  <parameter name="class_name" value="java.util.Vector"/>
  <parameter name="size" value="2"/> 	

  <classes>  		
   <class name="test.com.acme.da.HierarchyTest"/>
  </classes>
 </test>  
</suite>
```

上面的示例代码简单展示了如何使用参数化测试，这其中蕴含了很多的可能性。例如“对于不同的登录用户，将会看到不同的欢迎语”这样的场景，就可以通过这样的方式来分离测试代码和数据，这样即使不擅长编码的测试人员也可以自行修改测试数据，从而覆盖各种边界条件。

不过这种基于XML的参数化方式只能针对测试参数是字符串或者整形的情况，如果是复杂类型，比如自定义的类等情况怎么办呢？ 这时可以使用DataProvider的注解方式做到

<center><small>TestNG的DataProvider使用方式</small></center>
```
package test.com.acme.da.ng;

import java.util.Vector;

import static org.testng.Assert.assertEquals;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.acme.da.hierarchy.Hierarchy;
import com.acme.da.hierarchy.HierarchyBuilder;

public class HierarchyTest {

 @DataProvider(name = "class-hierarchies")
 public Object[][] dataValues(){
  return new Object[][]{
   {Vector.class, new String[] {"java.util.AbstractList", 
     "java.util.AbstractCollection"}},
   {String.class, new String[] {}}
  };
 }

 @Test(dataProvider = "class-hierarchies")
 public void verifyHierarchy(Class clzz, String[] names) 
  throws Exception{
    Hierarchy hier = HierarchyBuilder.buildHierarchy(clzz);
    assertEquals(hier.getHierarchyClassNames(), names, 
	  "values were not equal");		
 }
}
```

这里加上了@DataProvider的方法必须返回一个Object[][]二维数组作为返回值的类型，并且内层嵌套数组的顺序和长度要与测试方法的参数列表相匹配。TestNG会遍历这个返回的数组的第一维，并循环调用应用这个dataProvider的测试套件。

####Web自动化测试框架Selenium vs HttpUnit
Web的自动化测试工具包有很多, 这里主要对开源产品Selenium进行分析。

Selenium目前有两个版本，Selenium 1和Selenium 2. 

Selenium1是早先推出的版本，由两个主要部分,Selenium RC和Selenium Core组成。其中RC代表Remote Control，远程控制，实际上是一个代理服务器，用来接受远程客户端发出的指令，并控制本地的浏览器行为。其工作流程是：

1.客户端建立与 selenium-RC server 的连接。
2.Selenium RC Server 启动一个浏览器（或是已经使用中），并注入 JS 代码
3.将 Selenese 代码传到客户端的 Selenium-Core 中。
4.Selenium-Core 翻译并解析执行用户录制的操作。
5.让代理 Server 进行通讯
6.Remote Control Server 负责跟远程 Web 应用服务器进行通讯。
7.操作完成，显示结果，并执行下一指令。

//TODO IMAGE HERE

Selenium 2，又成为Selenium WebDriver，提供了一套全新的自动化接口，并突破了Selenium 1的一些限制，剔除了中间Server，并且可以有多个测试套件执行器可供选择。但与Selenium IDE的结合目前还不是很好，更适合于有编程经验的测试人员手写测试脚本。

//TODO Sample Code for selenium 2.


####数据相关的测试

####

###持续集成服务器

持续集成服务器指的是这样的工具，它作为整个持续集成过程的中枢，提供以下的功能：

1.通过嵌入对源代码控制系统的支持，持续的从源码库中获取最新代码。
2.编译代码
3.运行单元测试并生成测试报告
4.自动构建并部署最新版本到测试服务器
5.运行集成测试
6.通知机制，整个过程中任何一个步骤的失败，都会触发邮件等通知给开发人员。

持续集成服务器一旦配置好，整个开发过程就都是自动化的了，开发人员的提交的代码一旦进入代码库，就会自动触发整套集成过程。这样做的好处是可以尽早的发现错误，并给与修正。通过尽快修正小的问题来避免出现大问题。

//TODO 配图

CruiseControl是在Java开源世界中较早出现的持续集成工具，它不但提供了上面所说的那些功能，还提供了可供扩展的插件机制，是十分优秀的工具。然而它也有一些不足，最令人诟病的大概就是对用户不过友好，所有的配置都是通过xml来完成。

//TODO 插入一个CruiseControl的配置文件示例
```
<cruisecontrol>  
  
<property name="dir.javatools" value="C:\JavaTools"/>  
<property name="dir.ant" value="${dir.javatools}\apache-ant-1.7.1"/>  
<plugin name="htmlemail"   
    mailhost="smtp.mailhost.com"  
    returnaddress="bldadmin"  
    subjectprefix="[CruiseControl]: "/>  
  
<project name="common">  
    <property name="dir.project" value="projects/happybank/${project.name}"/>  
    <labelincrementer defaultLabel="HBC-1" separator="-"/>  
      
    <listeners>  
        <currentbuildstatuslistener file="logs\${project.name}\buildstatus.txt"/>  
    </listeners>  
      
    <bootstrappers>  
        <svnbootstrapper file="${dir.project}/build.xml"/>  
        <svnbootstrapper file="${dir.project}/default.properties"/>  
    </bootstrappers>  
      
    <modificationset quietperiod="30">  
        <svn localWorkingCopy="${dir.project}"/>  
    </modificationset>  
  
    <schedule interval="1200">  
        <ant antscript="${dir.ant}/bin/ant.bat"  
            antworkingdir="${dir.project}"  
            buildfile="build.xml" target="junit.all"/>  
    </schedule>  
  
    <log>  
        <merge file="${dir.project}/build/TESTS-*.xml"/>  
    </log>  
  
    <publishers>  
        <onsuccess>  
            <artifactspublisher dest="artifacts/${project.name}"  
                file="${dir.project}/dist/happybank-common.jar"/>  
        </onsuccess>  
        <htmlemail buildresultsurl="http://localhost:8080/dashboard/build/detail/${project.name}">  
            <always address="integrators@mailhost.com"/>  
            <failure address="developers@mailhost.com"/>  
        </htmlemail>  
    </publishers>  
  
</project>  
  
</cruisecontrol>  

```

Jenkins源自Hudson，由于Hudson现在走向了商业软件的道路，而Jenkins则作为开源软件继续发展，从Hudson分支出来。相比CruiseControl，Jenkins有很多优势：

1.Jenkins提供更为友好的用户界面，而CruiseControl在界面方面糟糕的几乎等于没有。

2.Jenkins内置的功能提供了极大的便利，不论是新建一个build，还是日常使用，你需要做的大部分时候仅仅是在用户界面上点击而已。在cruisecontrol新建build是通过创建config.xml来完成的。它仅仅提供非常有限的功能，很多时候你会发现，需要自己完成很多工作。

3.Jenkins是一个十分活跃的开源项目，拥有众多的插件支持。如果需要一个Jenkins本身并不提供的功能时，搜索一下插件库，通常会有收获。尤其是跟目前最流行的一些工具的集成，如JBehave，cobertura都提供jenkins插件，而针对CruiseControl的插件却很少。

4.使用Jenkins让学习成本很少，可以在更短的时间内开始工作。

###扩展机制

####FindBugs插件

####JSLint插件

####PMD插件

## 持续集成在某大型J2EE项目中的实践案例

本章以某跨国IT公司的售后支持平台的开发为例，阐述在大型J2EE项目中对持续集成的应用。首先介绍该项目的背景，技术栈及体系结构，原有开发流程以及其中暴露出的问题，最后介绍如何应用持续集成以及其他敏捷开发方法，解决问题，提高质产品质量和生产效率。

###项目背景 

某跨国IT公司的软件产品包括操作系统，数据库，中间件以及涵盖各行业的企业应用等等多种产品和服务，购买了这些产品或服务的客户都与该公司产生了大量的客户支持的需要。以往不同的产品线，会有各自不同的客户服务接口，这一方面造成客户的的使用不便，另一方面也使得该公司在整合统计售后服务数据方面遇到了许多困难。为了给客户提供方便快捷又统一的售后服务接口，该公司迫切需要一个统一的客户服务支持平台，并将原有的其他客户服务系统迁移到过来。

###技术架构



###原有集成系统

###对原有流程进行的改进

####Maven2到Maven3

####项目结构的划分

####静态代码分析工具的引入

#####FindBugs

#####PMD

#####CheckStyle

#####JSLint

####与项目管理工具的集成VersionOne

####

###持续集成服务器Jenkins


#持续集成的扩展 -- 持续交付


